//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.drm
//  ID Bytes: 
//   History: 
//------------------------------------------------


enum <ubyte> SectionType 
{
    General = 0,
    Empty = 1,
    Animation = 2,
    PushBufferWc = 3,
    PushBuffer = 4,
    Texture = 5,
    Audio = 6,
    DTPData = 7,
    Script = 8,
    ShaderLib = 9
};


struct Header
{
    int32 length;
    SectionType type;
    byte skip : 1;
    byte __free : 7;
    uint16 version_id;
    uint32 has_debug_info : 1;
    uint32 resource_type : 7;
    uint32 num_relocations : 24;
    int32 id;
    uint32 spec_mask;
};

struct Relocation
{
    uint16 type : 3;
    uint16 section_index_or_type : 13;
    uint16 type_specific;
    uint32 offset;
};

struct SectionData (int extra, int size)
{
    Relocation relocations[extra] <optimize=false>;
    byte data[size];
};

struct TextureData (int extra)
{
    Relocation relocations[extra] <optimize=false>;
    FSkip(4); // PCD9
    char format[4];
    uint32 pixel_data_length;
    uint32 unknown_2;
    uint16 width;
    uint16 height;
    uint32 unknown_3;
    byte data[pixel_data_length];
};

struct Vector3
{
    int16 x;
    int16 y;
    int16 z;
};

struct Normal
{
    byte x;
    byte y;
    byte z;
};

struct Vertex
{
    Vector3 position;
    Normal normal;
    byte pad;
    uint16 segment;
    uint32 uv;
};

struct Mesh(uint32 start)
{
    uint16 index_count;
    uint16 unknown_1;
    uint16 texture_id;
    uint16 unknown[5];
    uint32 end_of_mesh;
    uint16 indices[index_count];
    FSkip((end_of_mesh + start) - FTell());
};

struct MeshHeader
{
    byte data[180];
};

struct VertexData (int extra, int size)
{
    Relocation section_header[extra] <optimize=false>;
    local uint32 start = FTell();

    uint16 unknown_1[8];
    float scale_x, scale_y, scale_z, scale_w;
    uint32 vertex_count;
    uint32 length;

    byte unknown[5 * 4];
    float x;
    float y;
    float z;
    byte unknown_2[length - 40 - 20 - 12];
    Vertex vertices[vertex_count];
    
    local int mesh_index = 0;
    local uint32 index_count = 0;
    
    while(true)
    {
        if (ReadUInt() > 0)
        {
            Mesh mesh(start);
        }
        else
        {
            FSkip(4);
            break;
        }
    }
};

struct FileHeaderHeader
{
    uint32 type;
    uint32 start;
};


struct LocalData
{
    uint32 pointer;
    uint32 data;
};

struct OuterData
{
    ushort section;
    uint32 pointer;
    uint32 data;
};

// Information about the file in general.
struct FileHeader(int extra, int size)
{
    
    Relocation section_header[extra] <optimize=false>;

    local int start = FTell();
    ubyte data[size];
/*
    // New file header reading:
    uint16 flags[4];
    uint32 id;

    // World model...
    if (!flags[1])
    {
        // 280 total header size.
        byte world_header[260];
        float x;
        float y;
        float z;
        uint32 unknown_3;
        ushort unknown_4;
        byte unknown_2[size - (FTell() - start)];
    }
    else
    {
        byte unknown[24];
        uint32 size_of_section;

        byte unknown1[size_of_section - 40];
        while(true)
        {
            if (ReadUShort() == 0xffff)
            {
                FSkip(4);
                break;
            }

            uint16 id_of_next_section;
            FSkip(2);
        }
    }*/
};

struct WorldVertex
{
    int16 x;
    int16 y;
    int16 z;
    int16 w;
    uint32 colour;
    int16 u;
    int16 v;
    uint16 bend;
    uint16 bend_index;
};

struct WorldMeshData(int extra, int length)
{
    Relocation relocations[extra]  <optimize=false>;
    WorldVertex vertex[length / 20];
};

struct WorldMeshHeader
{
    uint32 type;
    uint32 start;
};

struct WorldMesh
{
    uint32 number_of_indices;
    uint32 separator;
    uint16 unknowns[16];
    uint32 end_of_mesh;
    uint16 indices[number_of_indices];
};

struct WorldModelData(int extra, int length)
{
    Relocation relocations[extra]  <optimize=false>;
    
    local int start = FTell();    
    FSeek(start + length);
};


typedef SectionData AudioData;
typedef SectionData UnknownData;

uint32 drm_header;          // 0xE
uint32 number_of_sections;
Header section_headers[number_of_sections];

local int i = 0;
local int zero_secs = 0;

local int has_model = 0;

local int audio_count = 0;
local int texture_count = 0;
local int section_count = 0;

for (i = 0; i < number_of_sections; ++i)
{
    SectionData data(section_headers[i].num_relocations, section_headers[i].length);
    continue;

    switch(section_headers[i].type)
    {
        case General:
        {
            ++section_count;
            SectionData data(section_headers[i].num_relocations, section_headers[i].length);
            break;
        }
/*

            if (zero_secs == 0)
            {
                FileHeader data(section_headers[i].num_relocations, section_headers[i].length) <bgcolor=0x2222FF>;
                // has_model = data.flags[1];
            }
            else if (zero_secs == 1)
            {
                if (has_model)
                {
                    VertexData data(section_headers[i].num_relocations, section_headers[i].length);
                }
                else
                {
                    WorldMeshData data(section_headers[i].num_relocations, section_headers[i].length);
                }
            }
            else if (ReadUInt() == 64 || ReadUInt() == 216)
            {
                SectionData data(section_headers[i].num_relocations, section_headers[i].length);
            }
            else
            {   
                SectionData data(section_headers[i].num_relocations, section_headers[i].length);
            }
            ++zero_secs;
            break;
        }
/*
        case Texture:
        {
            ++texture_count;
            TextureData data(section_headers[i].num_relocations);
            break;
        }*/
        case Audio:
        {
            ++audio_count;
            AudioData data(section_headers[i].num_relocations, section_headers[i].length);
            break;
        }
        default:
        {
            UnknownData data(section_headers[i].num_relocations, section_headers[i].length);
            break;
        }
    }
}

